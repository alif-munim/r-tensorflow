install.packages('reticulate')
reticulate::py_config()
Y
reticulate::py_config()
reticulate::py_config()
sessionInfo()
sessionInfo()
library(keras)
library(tensorflow)
sessionInfo()
library(EBImage)
library(keras)
install.packages(EBImage)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library(EBImage)
library(keras)
setwd("C:\\Users\\alif-\\Desktop\\am-new\\images")
pics <- c("p1.jpg", "p2.jpg", "p3.jpg", "p4.jpg", "p5.jpg", "p6.jpg",
"c1.jpg", "c2.jpg", "c3.jpg", "c4.jpg", "c5.jpg", "c6.jpg")
mypic <- list()
for (i in 1:12) {mypic[[i]] <- readImage(pics[i])}
print(mypic[[1]])
display(mypic[[1]])
summary(mypic[1])
summary(mypic[[1])
summary(mypic[[1]])
hist(mypic[[12]])
hist(mypic[[2]])
str(mypic)
for (i in 1:12) {mypic[[i]] <- resize(mypic[[i]], 28, 28)}
str(mypic)
display(mypic[[1]])
display(mypic[[8]])
for (i in 1:12) {mypic[[i]] <- array_reshape(mypic[[i]], c(28, 28, 3)}
for (i in 1:12) {mypic[[i]] <- array_reshape(mypic[[i]], c(28, 28, 3))}
str(mypic)
train_x <- NULL
for (i in 1:5) {train_x <- rbind(train_x, mypic[[i]])}
str(train_x)
for (i in 7:11) {train_x <- rbind(train_x, mypic[[i]])}
str(train_x)
test_x <- rbind(mypic[[6]], mypic[[12]])
train_y <- c(0,0,0,0,0,1,1,1,1,1)
test_y <- c(0, 1)
train_labels <- to_categorical(train_y)
train_labels <- to_categorical(test_y)
train_labels
train_labels <- to_categorical(train_y)
test_labels <- to_categorical(test_y)
train_labels
test_labels
model <- keras_model_sequential()
model %>%
layer_dense(units=256, activation = "relu", input_shape = c(2352)) %>%
layer_dense(units=128, activation = "relu") %>%
layer_dense(units=2, activation = "softmax")
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimize = optimizer_rmsprop(),
metrics = c("accuracy"))
history <- model %>%
fit(train_x, train_labels, epochs = 30, batch_size = 32,
validation_split = 0.2)
plot(history)
model %>% evaluate(train_x, train_labels)
pred <- model %>% predict_classes(train_x)
pred
table(Predicted = pred, Actual = train_y)
prob <- model %>% predict_proba(train_x)
prob
cbind(prob, Predicted = pred, Actual = train_y)
display(mypic[[11]])
model %>% evaluate(test_x, test_labels)
pred <- model %>% predict_classes(test_x)
pred
table(Predicted = pred, Actual = test_y)
pred <- model %>% predict_classes(test_x)
library(EBImage)
library(keras)
setwd("C:\\Users\\alif-\\Desktop\\am-new\\images")
pics <- c("p1.jpg", "p2.jpg", "p3.jpg", "p4.jpg", "p5.jpg", "p6.jpg",
"c1.jpg", "c2.jpg", "c3.jpg", "c4.jpg", "c5.jpg", "c6.jpg")
mypic <- list()
for (i in 1:12) {mypic[[i]] <- readImage(pics[i])}
setwd("C:\\Users\\alif-\\Desktop\\binary-classification\\images")
pics <- c("p1.jpg", "p2.jpg", "p3.jpg", "p4.jpg", "p5.jpg", "p6.jpg",
"c1.jpg", "c2.jpg", "c3.jpg", "c4.jpg", "c5.jpg", "c6.jpg")
mypic <- list()
for (i in 1:12) {mypic[[i]] <- readImage(pics[i])}
print(mypic[[1]])
display(mypic[[8]])
